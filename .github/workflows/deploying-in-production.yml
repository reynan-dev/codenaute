name: Start the deployment in production environment

on:
  push:
    branch:
      production
    paths:
      - 'server/src/**'
      - 'client/src/**'
      - 'client/public/**'

jobs:
  build-and-push-client-image:
    runs-on: ubuntu-latest
    if: ${{ (github.event.pull_request.draft == false) && (github.event.pull_request.label != null) }}

    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v3

      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag-client
        if: ${{ steps.release-label.outputs.level != null }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./client/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/codenaute-client:${{ steps.get-latest-tag-client.outputs.tag }}

  build-and-push-server-image:
    runs-on: ubuntu-latest
    if: ${{ (github.event.pull_request.draft == false) && (github.event.pull_request.label != null) }}

    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v3

      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag-server
        if: ${{ steps.release-label.outputs.level != null }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./server/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/codenaute-server:${{ steps.get-latest-tag-server.outputs.tag }}

  deploy-main-on-staging:
    runs-on: ubuntu-latest
    needs: ["build-and-push-client-image", "build-and-push-server-image"]
    environment: deploy
    if: ${{ (github.event.pull_request.draft == false) && (github.event.pull_request.label != null) }}

    steps:
      - name: Call webhook to deploy production branch on production environment
        run: curl ${{ secrets.URL_WEBHOOK_DEPLOY_PRODUCTION_ON_PROD }}
